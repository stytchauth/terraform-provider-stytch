name: Create GitHub release

on:
  push:
    branches: [main]

permissions:
  contents: write # Required for creating releases and pushing tags.

jobs:
  tag_release:
    runs-on: ubuntu-latest
    outputs:
      diff: ${{ steps.diff.outputs.diff }}
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: version
        run: |
          VERSION=$(sed -n 's/.*Version = "\(.*\)".*/\1/p' internal/provider/version.go)
          echo "release_tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Get changed files
        id: files
        uses: jitterbit/get-changed-files@v1

      - name: Check for version.go diff
        id: diff
        run: |
          FOUND=0
          for changed_file in ${{ steps.files.outputs.all }}; do
            if [[ "$changed_file" == "internal/provider/version.go" ]]; then
              FOUND=1
            fi
          done
          echo "diff=$FOUND" >> $GITHUB_OUTPUT

      - name: Create release tag
        if: steps.diff.outputs.diff != 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ steps.version.outputs.release_tag }}
          git push origin ${{ steps.version.outputs.release_tag }}

  goreleaser:
    needs: tag_release
    runs-on: ubuntu-latest
    if: needs.tag_release.outputs.diff != 0
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@cb9bde2e2525e640591a934b1fd28eef1dcaf5e5 # v6.2.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
